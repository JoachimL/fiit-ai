@using System.Linq;
@model Strongr.Web.Models.WorkoutViewModels.DetailViewModel

@{
    ViewData["Title"] = "Detail";
}

<div class="btn-group pull-right" dropdown>
    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        <span class="glyphicon glyphicon-cog" aria-hidden="true"></span>
        <span class="caret"></span>
        <span class="sr-only">Show menu</span>
    </button>
    <ul class="dropdown-menu" role="menu">
        <li>
            <a data-toggle="collapse" href="#workoutDetailsEditor" aria-expanded="false" aria-controls="workoutDetailsEditor">
                <span class="glyphicon glyphicon-edit"></span> Edit workout
            </a>
        </li>

        @if (Model.Activities.Length > 0)
        {
            <li>
                <a href="#" class="submit-form" data-target="#copy-workout-form">
                    <span class="glyphicon glyphicon-copy"></span> Copy this workout
                </a>
                <form method="post" id="copy-workout-form" class="copy-workout form-inline" asp-action="CopyWorkout">
                    <input name="WorkoutId" type="hidden" value="@Model.WorkoutId" />
                    <input name="CurrentDateTime" class="current-datetime" type="hidden" />
                    <input name="TimeZoneName" value="Europe/Oslo" type="hidden" />
                    <button type="submit" class="btn btn-primary copy-workout hidden-submit">Copy this workout</button>
                </form>
            </li>
        }
        <li class="divider"></li>
        <li>
            <a asp-action="Delete" asp-route-id="@Model.WorkoutId">
                <span class="glyphicon glyphicon-trash"></span> Delete
            </a>
        </li>
    </ul>
</div>

<h2>Workout details</h2>
<small class="startDateTimeheader"></small>

<form asp-action="SaveWorkout" class="form-inline collapse well" id="workoutDetailsEditor">
    <div class="form-group">
        <input asp-for="WorkoutId" type="hidden" />
        <input asp-for="Version" type="hidden" />

        <input type="hidden" id="StartDateTime-ISO" value="@Model.StartDateTime.ToString("o")" />
        <label asp-for="StartDateTime" class="control-label"></label>
        <div class='input-group date' id='startedDateTimeInput'>
            <span class="input-group-addon">
                <span class="glyphicon glyphicon-calendar"></span>
            </span>
            <input asp-for="StartDateTime" class="form-control" />
            <span class="input-group-btn">
                <button type="submit" class="btn btn-primary">Update</button>
            </span>
        </div>

        <span asp-validation-for="StartDateTime" class="text-danger"></span>
    </div>
</form>
<hr />

@if (Model.ActivityId == Guid.Empty)
{
    <h3>Add activity</h3>
}
else
{
    <h3>Update activity</h3>
}
<div class="row">
    <div class="col-xs-12">
        <form asp-action="SaveActivity" class="form">
            <input asp-for="WorkoutId" type="hidden" />
            <input asp-for="ActivityId" type="hidden" />
            <input asp-for="Version" type="hidden" />

            <div class="form-group">
                <label for="exercise">Exercise</label>
                <select asp-for="ExerciseId"
                        class="form-control"
                        autocomplete="off"
                        id="exerciseSelect"
                        asp-items="Model.AllExercises.Select(e=>new SelectListItem { Value = e.Id, Text = e.Name })">
                    <option value="" disabled selected>Select the exercise</option>
                </select>
            </div>
            <div class="sets">
                <div class="row">
                    <div class="col-xs-2">
                        <p class="form-control-static"><strong>Set</strong></p>
                    </div>
                    <div class="col-xs-5">
                        <p class="form-control-static"><strong>Repetitions</strong></p>
                    </div>
                    <div class="col-xs-5">
                        <p class="form-control-static"><strong>Weight</strong></p>
                    </div>
                </div>
                @foreach (var set in Model.Sets.Select((x, idx) => new { Set = x, Index = idx }))
                {
                    <div class="row">
                        <div class="col-xs-2"><p class="form-control-static"><strong>@set.Index</strong></p></div>
                        <div class="col-xs-5">
                            <label for="set-reps-@set.Index" class="sr-only">Repetitions</label>
                            <input class="form-control" id="set-reps-@set.Index" name="Sets[@set.Index].Repetitions" size="3" value="@set.Set.Repetitions" placeholder="Reps" type="number" step="1" />
                        </div>
                        <div class="col-xs-5">
                            <label for="set-weight-@set.Index" class="sr-only">Weight</label>
                            <input class="form-control" id="set-weight-@set.Index" name="Sets[@set.Index].Weight" type="number" step="0.1" min="0" size="5" value="@set.Set.Weight" placeholder="Weight" />
                        </div>
                    </div>
                    @*<div class="col-lg-3 col-sm-12 set">
                            <h4 class="set-number">Set @(set.Index + 1)</h4>
                            <div class="form-group">
                                <label for="set-reps-@set.Index">Repetitions</label>
                                <input class="form-control" id="set-reps-@set.Index" name="Sets[@set.Index].Repetitions" size="3" value="@set.Set.Repetitions" placeholder="Reps" type="number" step="1" />
                            </div>
                            <div class="form-group">
                                <label for="set-weight-@set.Index">Weight</label>
                                <input class="form-control" id="set-weight-@set.Index" name="Sets[@set.Index].Weight" type="number" step="0.1" min="0" size="5" value="@set.Set.Weight" placeholder="Weight" />
                            </div>
                        </div>*@
                }
            </div>
            <div class="row">
                <div class="col-xs-offset-8 col-xs-4">
                    <button class="btn btn-primary add-set pull-right" type="button">
                        <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add set
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-12">
                    <button type="submit" class="btn btn-success">
                        <span class="glyphicon glyphicon-check" aria-hidden="true"></span> Finish activity
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

@if (Model.PendingActivities.Any())
{
    <div class="row">
        <div class="col-sm-12">
            <h3>Pending activities</h3>
            <p>Click activity to add it to your workout.</p>
            <div class="list-group">
                @foreach (var activity in Model.PendingActivities)
                {
                    <a asp-action="Detail" asp-route-id="@Model.WorkoutId" asp-route-pendingActivityId="@activity.Id" class="list-group-item d-flex justify-content-between align-items-center">
                        @activity.ExerciseName
                    </a>
                }
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-sm-12">
        <h3>Completed activities</h3>
        <div class="list-group">
            @foreach (var activity in Model.Activities)
            {
                <a asp-action="Detail" asp-route-id="@Model.WorkoutId" asp-route-activityId="@activity.Id" class="list-group-item d-flex justify-content-between align-items-center">
                    @activity.ExerciseName
                </a>
            }
        </div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script src="~/selectize/dist/js/standalone/selectize.min.js"></script>
    <script>

        function addSet(weight, repetitions) {
            var setNumber = $('.sets').children().length;
            $('.sets').append(
                '<div class="col-lg-3 col-sm-12 set">' +
                '    <h4 class="set-number">Set ' + (setNumber + 1) + '</h4>' +
                '    <div class="form-group">' +
                '        <label for="set-reps-' + setNumber + '">Repetitions</label>' +
                '        <input class="form-control" id="set-reps-' + setNumber + '" name="Sets[' + setNumber + '].Repetitions" size="3" value="' + repetitions + '" placeholder="Reps" type="number" step="1" />' +
                '    </div>' +
                '    <div class="form-group">' +
                '        <label for="set-weight-' + setNumber + '">Weight</label>' +
                '        <input class="form-control" id="set-weight-' + setNumber + '" name="Sets[' + setNumber + '].Weight" type="number" step="0.1" min="0" size="5" value="' + weight + '" placeholder="Weight" />' +
                '    </div>' +
                '</div>'
            );

        }

        $(function () {

          $('a.submit-form').click(function () {
            $($(this).attr('data-target')).submit();
          });
          $('.hidden-submit').hide();

            $('form.copy-workout').submit(function () {
                $('form.copy-workout .current-datetime').val(moment().format())
            })

            var startDateTime = moment($("#StartDateTime-ISO").val());
            $('.startDateTimeheader').text(startDateTime);
            $('.add-set').click(function () { addSet(0, 0) });

            $('#startedDateTimeInput').datetimepicker({
                format: 'YYYY/MM/DD HH:mm'
            });
            $('#startedDateTimeInput')
                .data("DateTimePicker")
                .date(startDateTime);

            $("#exerciseSelect").selectize();

            $('#exerciseSelect').change(function (event) {
                var exerciseId = $("#exerciseSelect option:selected").val();

                fetch('/api/users/@Model.UserId/exercises/' + exerciseId + '/last')
                    .then((data) => data.json())
                    .then(function (data) {
                        var sets = data && data.sets;
                        if (sets && sets.length) {
                            $('.set-table-body').empty();
                            var ii = 0;
                            for (ii = 0; ii < sets.length; ii++) {
                                addSet(sets[ii].weight, sets[ii].repetitions)
                            }
                        }
                    });
            });
        });
    </script>
}

@section HeadBottom {
    <link rel="stylesheet" href="~/selectize/dist/css/selectize.bootstrap3.css" />
}
